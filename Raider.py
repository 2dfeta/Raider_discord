import discord
from discord.ext import commands
from discord import app_commands
import os
import json
import asyncio
from colorama import init, Fore, Style

init(autoreset=True)

# H√†m qu·∫£n l√Ω token
def save_token(token):
    with open("token.json", "w") as file:
        json.dump({"TOKEN": token}, file)

def load_token():
    try:
        with open("token.json", "r") as file:
            data = json.load(file)
            return data.get("TOKEN")
    except FileNotFoundError:
        print(Fore.RED + "L·ªói: Kh√¥ng t√¨m th·∫•y file token.json")
        return None
    except json.JSONDecodeError:
        print(Fore.RED + "L·ªói: ƒê·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá trong token.json")
        return None

# Hi·ªÉn th·ªã logo
def display_logo():
    logo = r'''
‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë 
‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë      ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë         ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë     
‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë       ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë         ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë     
‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë        ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë    ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë     
‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë  ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë            ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñì‚ñà‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë         ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë     
‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë  ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë            ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñì‚ñà‚ñì‚ñí‚ñë ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë         ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë     
‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë   ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë             ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñì‚ñí‚ñë  ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë  ‚ñë‚ñí‚ñì‚ñà‚ñì‚ñí‚ñë     
'''
    os.system('cls' if os.name == 'nt' else 'clear')  
    print(Fore.BLUE + logo)

def display_status(connected):
    print(Fore.GREEN + "Tr·∫°ng th√°i: ƒê√£ k·∫øt n·ªëi" if connected else Fore.RED + "Tr·∫°ng th√°i: Ng·∫Øt k·∫øt n·ªëi")

# Qu·∫£n l√Ω token
def token_management():
    os.system('cls' if os.name == 'nt' else 'clear')
    print(Fore.CYAN + "Qu·∫£n l√Ω Token Bot Discord\n")
    print("1. Nh·∫≠p token m·ªõi")
    print("2. S·ª≠ d·ª•ng token ƒë√£ l∆∞u")
    choice = input(Fore.YELLOW + "Ch·ªçn t√πy ch·ªçn (1, 2): ")

    if choice == "1":
        new_token = input(Fore.GREEN + "Nh·∫≠p token m·ªõi: ")
        save_token(new_token)
        print(Fore.GREEN + "ƒê√£ l∆∞u token th√†nh c√¥ng!")
        return new_token
    elif choice == "2":
        token = load_token()
        if token:
            print(Fore.GREEN + f"ƒê√£ t·∫£i token: {token}")
            return token
        else:
            print(Fore.RED + "Kh√¥ng t√¨m th·∫•y token.")
            return None
    else:
        print(Fore.RED + "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        return None

# C·∫•u h√¨nh bot
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# L·ªõp n√∫t Spam c·∫£i ti·∫øn
class SpamButton(discord.ui.View):
    def __init__(self, message, spam_count=20):
        super().__init__(timeout=60)  # Timeout 60 gi√¢y
        self.message = message
        self.spam_count = min(spam_count, 20)  # Gi·ªõi h·∫°n t·ªëi ƒëa 20 tin nh·∫Øn
    
    @discord.ui.button(label="Spam", style=discord.ButtonStyle.red, emoji="üí£")
    async def spam_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not interaction.user.guild_permissions.manage_messages:
            return await interaction.response.send_message(
                "‚ùå B·∫°n c·∫ßn quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!",
                ephemeral=True
            )
        
        await interaction.response.defer(ephemeral=True)
        channel = interaction.channel
        
        # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
        await interaction.followup.send(
            f"‚ö†Ô∏è ƒêang g·ª≠i {self.spam_count} tin nh·∫Øn spam...",
            ephemeral=True
        )
        
        # G·ª≠i tin nh·∫Øn spam tr·ª±c ti·∫øp v√†o k√™nh
        for i in range(self.spam_count):
            try:
                await channel.send(f"{self.message} [{i+1}/{self.spam_count}]")
                await asyncio.sleep(1.5)  # Gi·∫£m t·ªëc ƒë·ªô ƒë·ªÉ tr√°nh b·ªã rate limit
            except discord.HTTPException as e:
                print(Fore.RED + f"L·ªói khi spam: {e}")
                await channel.send("üõë ƒê√£ x·∫£y ra l·ªói khi spam tin nh·∫Øn!")
                break
        
        # G·ª≠i th√¥ng b√°o ho√†n th√†nh
        await interaction.followup.send(
            f"‚úÖ ƒê√£ g·ª≠i xong {self.spam_count} tin nh·∫Øn!",
            ephemeral=True
        )

# L·ªánh spamraid c·∫£i ti·∫øn
@bot.tree.command(name="spamraid", description="T·∫°o n√∫t ƒë·ªÉ spam tin nh·∫Øn (c·∫ßn quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn)")
@app_commands.describe(
    message="N·ªôi dung tin nh·∫Øn c·∫ßn spam",
    count="S·ªë l·∫ßn spam (t·ªëi ƒëa 20)"
)
async def spamraid(interaction: discord.Interaction, message: str, count: int = 10):
    count = min(max(count, 1), 20)  # Gi·ªõi h·∫°n t·ª´ 1-20 l·∫ßn
    
    if not interaction.user.guild_permissions.manage_messages:
        return await interaction.response.send_message(
            "‚ùå B·∫°n c·∫ßn quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            ephemeral=True
        )
    
    view = SpamButton(message, count)
    await interaction.response.send_message(
        f"üí£ **THI·∫æT L·∫¨P SPAM** üí£\nN·ªôi dung: {message}\nS·ªë l·∫ßn: {count}\n"
        "Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu spam",
        view=view,
        ephemeral=True
    )

# L·ªánh nuke c·∫£i ti·∫øn
@bot.tree.command(name="nuke", description="X√≥a to√†n b·ªô server (c·∫ßn quy·ªÅn qu·∫£n tr·ªã)")
async def nuke(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message(
            "‚ùå B·∫°n c·∫ßn quy·ªÅn qu·∫£n tr·ªã ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            ephemeral=True
        )
    
    # X√°c nh·∫≠n tr∆∞·ªõc khi nuke
    confirm_view = discord.ui.View()
    confirm_view.add_item(discord.ui.Button(
        style=discord.ButtonStyle.red,
        label="X√ÅC NH·∫¨N NUKE",
        custom_id="confirm_nuke"
    ))
    
    await interaction.response.send_message(
        "‚ö†Ô∏è **C·∫¢NH B√ÅO: THAO T√ÅC NGUY HI·ªÇM** ‚ö†Ô∏è\n"
        "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô server?\n"
        "‚Ä¢ X√≥a t·∫•t c·∫£ k√™nh\n‚Ä¢ X√≥a t·∫•t c·∫£ vai tr√≤\n‚Ä¢ ƒê·ªïi t√™n server\n\n"
        "Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c nh·∫≠n.",
        view=confirm_view,
        ephemeral=True
    )
    
    # Ch·ªù x√°c nh·∫≠n
    try:
        await bot.wait_for(
            "interaction",
            check=lambda i: i.data.get("custom_id") == "confirm_nuke" and i.user == interaction.user,
            timeout=30
        )
    except asyncio.TimeoutError:
        return await interaction.edit_original_response(
            content="üïí ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n",
            view=None
        )
    
    # B·∫Øt ƒë·∫ßu th·ª±c hi·ªán nuke
    await interaction.edit_original_response(
        content="‚ò¢Ô∏è ƒêang th·ª±c hi·ªán nuke server...",
        view=None
    )
    
    guild = interaction.guild
    
    # X√≥a k√™nh
    for channel in guild.channels:
        try:
            await channel.delete()
            await asyncio.sleep(0.7)
        except Exception as e:
            print(Fore.YELLOW + f"Kh√¥ng th·ªÉ x√≥a k√™nh {channel.name}: {e}")
    
    # X√≥a vai tr√≤
    for role in guild.roles:
        try:
            if role.name != "@everyone":
                await role.delete()
                await asyncio.sleep(0.7)
        except Exception as e:
            print(Fore.YELLOW + f"Kh√¥ng th·ªÉ x√≥a vai tr√≤ {role.name}: {e}")
    
    # T·∫°o k√™nh m·ªõi
    for i in range(5):
        try:
            await guild.create_text_channel(f"nuked-by-{interaction.user.name}-{i+1}")
            await asyncio.sleep(0.7)
        except Exception as e:
            print(Fore.YELLOW + f"Kh√¥ng th·ªÉ t·∫°o k√™nh: {e}")
    
    # ƒê·ªïi t√™n server
    try:
        await guild.edit(name=f"üíÄ NUKE BY {interaction.user.name.upper()} üíÄ")
    except Exception as e:
        print(Fore.YELLOW + f"Kh√¥ng th·ªÉ ƒë·ªïi t√™n server: {e}")
    
    await interaction.followup.send(
        f"üí• **SERVER ƒê√É B·ªä NUKE B·ªûI {interaction.user.mention}** üí•",
        ephemeral=False
    )

# S·ª± ki·ªán khi bot ready
@bot.event
async def on_ready():
    display_logo()
    display_status(True)
    print("ƒê√£ k·∫øt n·ªëi v·ªõi t∆∞ c√°ch " + Fore.YELLOW + f"{bot.user}")

    try:
        synced = await bot.tree.sync()
        print(Fore.GREEN + f"ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh.")
    except Exception as e:
        display_status(False)
        print(Fore.RED + f"L·ªói khi ƒë·ªìng b·ªô l·ªánh: {e}")

# Kh·ªüi ch·∫°y bot
if __name__ == "__main__":
    TOKEN = token_management()
    if TOKEN:
        try:
            bot.run(TOKEN)
        except discord.errors.LoginFailure:
            print(Fore.RED + "Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i token.")
            input(Fore.YELLOW + "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...")
            TOKEN = token_management()
            if TOKEN:
                bot.run(TOKEN)
        except Exception as e:
            print(Fore.RED + f"L·ªói kh√¥ng mong mu·ªën: {e}")
            input(Fore.YELLOW + "Nh·∫•n Enter ƒë·ªÉ kh·ªüi ƒë·ªông l·∫°i...")
            TOKEN = token_management()
            if TOKEN:
                bot.run(TOKEN)
    else:
        print(Fore.RED + "‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i ho·∫∑c thi·∫øt l·∫≠p token.")
